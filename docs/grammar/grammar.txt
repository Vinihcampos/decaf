GRAMÁTICA

Prog  		-: Dec | DecProg
Dec   		-: ClassDec | InterDec | Var Dec' | void ident FuncDec
Dec'  		-: ; | FuncDec
Var   		-: Type ident
Type  		-: int Type' | double Type' | bool Type' | string Type' | ident Type'
Type' 		-: λ | [] Type'
FuncDec 	-: (Formals) StmtBlock
Formals		-: λ | Formals'
Formals'	-: Var Formals''
Formals''	-: λ | , Formals'
StmtBlock	-: { Var ; StmtBlock' Stmt  }
StmtBlock'	-: λ | Var; StmtBlock'
Stmt 		-: λ | IfStmt Stmt' | whileStmt Stmt' | forStmt Stmt' | BreakStmt Stmt' | returnStmt Stmt' | PrintStmt Stmt' | StmtBlock' Stmt' | Expr' ; Stmt'
Stmt' 		-: Stmt
IfStmt      -: if (Expr) Stmt ElseStmt
ElseStmt	-: λ | else Stmt
WhileStmt 	-: while (Expr) Stmt
forStmt		-: for (Expr' ; Expr ; Expr') Stmt
ReturnStmt 	-: return Expr' ;
BreakStmt	-: break ;
PrintStmt 	-: print ( Expr PrintStmt'
PrintStmt'	-: ) ; | , Expr PrintStmt'
Expr'		-: λ | Expr
ClassDec 	-: class ident ClassDec'
ClassDec'	-: extends ident ClassDec'' | ClassDec''
ClassDec''	-: implements ident Implements { Field } | { Field }
Implements 	-: λ | , ident Implements
Field		-: λ | Var Dec' Field
InterDec 	-: interface ident { Prototype }
Prototype 	-: λ | Var (Formals) ; | void ident (Formals) ;