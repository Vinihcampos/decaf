Prog  		: Dec Prog1 ;
Prog1		: /*eps*/ ;
Prog1		: Prog ;
Dec   		: ClassDec ;
Dec   		: InterDec ;
Dec   		: Var Dec1 ;
Dec   		: tVoid tId FuncDec ;
Dec1  		: tSemiColon ;
Dec1  		: FuncDec ;
Var   		: Type tId ;
Type  		: tInt Type1 ;
Type  		: tDouble Type1 ;
Type  		: tBool Type1 ;
Type  		: tString Type1 ;
Type  		: tId Type1 ;
Type1 		: /*eps*/ ;
Type1 		: tBracketLeft tBracketRight Type1 ;
FuncDec 	: tParLeft Formals tParRight StmtBlock ;
Formals		: /*eps*/ ;
Formals		: Formals1 ;
Formals1	: Var Formals2 ;
Formals2	: /*eps*/ ;
Formals2	: tComma Formals1 ;
StmtBlock	: tBraceLeft Var tSemiColon StmtBlock1 Stmt  tBraceRight ;
StmtBlock1	: /*eps*/ ;
StmtBlock1	: Var tSemiColon StmtBlock1 ;
Stmt 		: /*eps*/ ;
Stmt 		: IfStmt Stmt1 ;
Stmt 		: WhileStmt Stmt1 ;
Stmt 		: ForStmt Stmt1 ;
Stmt 		: BreakStmt Stmt1 ;
Stmt 		: ReturnStmt Stmt1 ;
Stmt 		: PrintStmt Stmt1 ;
Stmt 		: StmtBlock1 Stmt1 ;
Stmt 		: Expr1 tSemiColon Stmt1 ;
Stmt1 		: Stmt ;
IfStmt      : tIf tParLeft Expr tParRight Stmt ElseStmt ;
ElseStmt	: /*eps*/ ;
ElseStmt	: tElse Stmt ;
WhileStmt 	: tWhile tParLeft Expr tParRight Stmt ;
ForStmt		: tFor tParLeft Expr1 tSemiColon Expr tSemiColon Expr1 tParRight Stmt ;
ReturnStmt 	: tReturn Expr1 tSemiColon ;
BreakStmt	: tBreak tSemiColon ;
PrintStmt 	: tPrint tParLeft Expr PrintStmt1 ;
PrintStmt1	: tParRight tSemiColon ;
PrintStmt1	: tComma Expr PrintStmt1 ;
ClassDec 	: tClass tId ClassDec1 ;
ClassDec1	: tExtends tId ClassDec2 ;
ClassDec1	: ClassDec2 ;
ClassDec2	: tImplements tId Implements tBraceLeft Field tBraceRight ;
ClassDec2	: tBraceLeft Field tBraceRight ;
Implements 	: /*eps*/ ;
Implements 	: tComma tId Implements ;
Field		: /*eps*/ ;
Field		: Var Dec1 Field ;
InterDec 	: tInterface tId tBraceLeft Prototype tBraceRight ;
Prototype 	: /*eps*/ ;
Prototype 	: Var tParLeft Formals tParRight tSemiColon ;
Prototype 	: tVoid tId tParLeft Formals tParRight tSemiColon ;
Expr		: LValue tAssignment Expr ;
Expr		: F ;
F           : G tOr F  ;
F           : G tAnd F ;
F           : G ;
G           : H tLess G ;
G           : H tLessEqual G ;
G           : H tGreater G ;
G           : H tGreaterEqual G ;
G           : H tEqual G ;
G           : H tDiff G ;
G           : H ;
H           : I H1 ;
H1          : /*eps*/ ;
H1          : tPlus I H1 ;
H1          : tMinus I H1 ;
I           : J I1 ;
I1          : /*eps*/ ;
I1          : tMulti J I1 ;
I1          : tDiv J I1 ;
I1          : tMod J I1 ;
J           : tNot J ;
J           : tMinus J ;
J           : Term   ;
Term        : Constant ;
Term        : tThis ;
Term        : tReadInteger tParLeft tParRight ;
Term        : tReadLine tParLeft tParRight ;
Term        : tNew tParLeft tId tParRight ;
Term        : tNewArray tParLeft Expr tComma Type tParRight ;
Term        : LValue ;
Term        : Call ;
Term        : tParLeft Expr tParRight ;
Expr1		: /*eps*/ ;
Expr1		: Expr ;
Expr2 		: /*eps*/ ;
Expr2 		: tComma Expr Actual ;
LValue 		: tId ;
LValue 		: Expr tDot tId ;
LValue 		: Expr tBracketLeft Expr tBracketRight ;
Call 		: tId tParLeft Actual tParRight ;
Call 		: Expr tDot tId tParLeft Actual tParRight ;
Actual 		: /*eps*/ ;
Actual 		: Expr Expr2 ;
Constant	: tIntConstant ;
Constant	: tDoubleConstant ;
Constant	: tBoolConstant ;
Constant	: tStringConstant ;
Constant	: tNull ;