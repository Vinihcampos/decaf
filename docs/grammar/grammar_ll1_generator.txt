%token tVoid tInt tDouble tBool tString tClass tInterface tNull tThis tExtends tImplements tFor tWhile tIf tElse tReturn tBreak tNew tNewArray tPrint tReadInteger tReadLine tId tPlus tMinus tMulti tDiv tMod tLess tLessEqual tGreater tGreaterEqual tEqual tDiff tAssignment tAnd tOr tNot tSemiColon tComma tDot tBracketLeft tBracketRight tParLeft tParRight tBraceLeft tBraceRight tIntConstant tDoubleConstant tTrue tFalse tClassId tStringConstant
%% /* LL(1) */
Prog  		: Dec Prog1  ;
Prog1		: /*eps*/  ;
Prog1		: Prog  ;
Dec   		: ClassDec  ;
Dec   		: InterDec  ;
Dec   		: Var Dec1  ;
Dec   		: tVoid tId FuncDec  ;
Dec1  		: tSemiColon  ;
Dec1  		: FuncDec  ;
Var   		: Type tId  ;
Type  		: tInt Type1  ;
Type  		: tDouble Type1  ;
Type  		: tBool Type1  ;
Type  		: tString Type1  ;
Type  		: tClassId Type1  ;
Type1 		: /*eps*/  ;
Type1 		: tBracketLeft tBracketRight Type1  ;
FuncDec 	: tParLeft Formals tParRight StmtBlock  ;
Formals		: /*eps*/ ;
Formals		: Formals1  ;
Formals1	: Var Formals2  ;
Formals2	: /*eps*/  ;
Formals2	: tComma Formals1  ;
StmtBlock	: tBraceLeft StmtBlock1 Stmt tBraceRight  ;
StmtBlock1	: /*eps*/  ;
StmtBlock1	: Var tSemiColon StmtBlock1  ;
Stmt 		: tIf tParLeft Expr tParRight Matched OpTail Stmt ;
Stmt 		: Stmt1 Stmt;
Matched 	: tIf tParLeft Expr tParRight Matched tElse Matched ;
Matched		: Stmt1 ;
OpTail 		: tElse Tail ;
OpTail 		: /*eps*/ ;
Tail 		: tIf tParLeft Expr tParRight Tail ;
Tail 		: Stmt1 ;
Stmt1 		: WhileStmt  ;
Stmt1 		: ForStmt  ;
Stmt1 		: BreakStmt  ;
Stmt1 		: ReturnStmt  ;
Stmt1 		: PrintStmt  ;
Stmt1 		: StmtBlock  ;
Stmt1 		: Expr1 tSemiColon  ;
WhileStmt 	: tWhile tParLeft Expr tParRight Stmt  ;
ForStmt		: tFor tParLeft Expr1 tSemiColon Expr tSemiColon Expr1 tParRight Stmt  ;
ReturnStmt 	: tReturn Expr1 tSemiColon  ;
BreakStmt	: tBreak tSemiColon  ;
PrintStmt 	: tPrint tParLeft Expr PrintStmt1  ;
PrintStmt1	: tParRight tSemiColon  ;
PrintStmt1	: tComma Expr PrintStmt1  ;
ClassDec 	: tClass tId ClassDec1  ;
ClassDec1	: tExtends tId ClassDec2  ;
ClassDec1	: ClassDec2  ;
ClassDec2	: tImplements tId Implements tBraceLeft Field tBraceRight  ;
ClassDec2	: tBraceLeft Field tBraceRight  ;
Implements 	: /*eps*/  ;
Implements 	: tComma tId Implements  ;
Field		: /*eps*/  ;
Field		: Var Dec1 Field  ;
InterDec 	: tInterface tId tBraceLeft Prototype tBraceRight  ;
Prototype 	: /*eps*/  ;
Prototype 	: Var tParLeft Formals tParRight tSemiColon  ;
Prototype 	: tVoid tId tParLeft Formals tParRight tSemiColon  ;
Expr		: LValue AssignOrCallOrVariable;
Expr		: RelOp LogicOp ;
AssignOrCallOrVariable : Call ;
AssignOrCallOrVariable : Variable Assignment;
Call 		: tParLeft Actual tParRight CallVariable ;
CallVariable : /*eps*/ ;
CallVariable : VariableNotEmpty ;
VariableNotEmpty : tBracketLeft Expr tBracketRight CallAfterVariable ;
VariableNotEmpty : tDot LValue CallAfterVariable ;
CallAfterVariable : /*eps*/ ;
CallAfterVariable : VariableNotEmpty ;
CallAfterVariable : Call ;
Variable 	: /*eps*/ ;
Variable 	: tBracketLeft Expr tBracketRight Variable ;
Variable 	: tDot LValue Variable ;
Assignment  : /*eps*/ ;
Assignment  : tAssignment Expr ;
LogicOp 	: /*eps*/ ;
LogicOp 	: tOr RelOp LogicOp ;
LogicOp 	: tAnd RelOp LogicOp   ;
RelOp       : PlusSubOp RelOp1 ;
RelOp1		: /*eps*/ ;
RelOp1      : tLess PlusSubOp RelOp1  ;
RelOp1      : tLessEqual PlusSubOp RelOp1 ;
RelOp1      : tGreater PlusSubOp RelOp1 ;
RelOp1      : tGreaterEqual PlusSubOp RelOp1 ;
RelOp1      : tEqual PlusSubOp RelOp1 ;
RelOp1      : tDiff PlusSubOp RelOp1 ;
PlusSubOp   : MulDivModOp PlusSubOp1  ;
PlusSubOp1  : /*eps*/  ;
PlusSubOp1  : tPlus MulDivModOp PlusSubOp1  ;
PlusSubOp1  : tMinus MulDivModOp PlusSubOp1  ;
MulDivModOp : UnaryOp MulDivModOp1  ;
MulDivModOp1 : /*eps*/  ;
MulDivModOp1 : tMulti UnaryOp MulDivModOp1  ;
MulDivModOp1 : tDiv UnaryOp MulDivModOp1  ;
MulDivModOp1 : tMod UnaryOp MulDivModOp1  ;
UnaryOp     : tNot UnaryOp  ;
UnaryOp     : tMinus UnaryOp ;
UnaryOp		: Term ;
Term        : Constant  ;
Term        : tReadInteger tParLeft tParRight  ;
Term        : tReadLine tParLeft tParRight  ;
Term        : tNew tParLeft tId tParRight  ;
Term        : tNewArray tParLeft Expr tComma Type tParRight  ;
Term        : tParLeft Expr tParRight  ;
LValue 		: tId ;
LValue      : tThis tDot tId ;
Expr1		: /*eps*/  ;
Expr1		: Expr ;
Expr2 		: /*eps*/  ;
Expr2 		: tComma Expr Expr2 ;
Actual 		: /*eps*/  ;
Actual 		: Expr Expr2  ;
Constant	: tIntConstant  ;
Constant	: tDoubleConstant  ;
Constant	: tTrue  ;
Constant	: tFalse  ;
Constant	: tStringConstant  ;
Constant	: tNull  ;