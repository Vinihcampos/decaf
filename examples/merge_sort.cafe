void main(){
    int[] vector;
    vector = newArray(5, int);

    vector[0] = 10;
    vector[1] = 50;
    vector[2] = 2;
    vector[3] = 3;
    vector[4] = 7;

    vector = merge_sort(vector, 0, vector.length() - 1);
}

void merge(int[] vector, int l, int m, int r){
    int n1;
    int n2;
    int[] l_;
    int[] r_;
    int i; 
    int j;
    int k;
    
    n1 = m - l + 1;
    n2 = r - m;
    l_ = newArray(n1, int);
    r_ = newArray(n2, int);
    
    for (i=0; i<n1; i=i+1)
        l_[i] = vector[l + i];
    for (i=0; i<n2; i=i+1)
        r_[i] = vector[m + 1+ i];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2){
        if (l_[i] <= r_[j]){
            vector[k] = l_[i];
            i = i + 1;
        }
        else{
            vector[k] = r_[j];
            j = j + 1;
        }
        k = k + 1;
    }

    while (i < n1){
        vector[k] = l_[i];
        i = i + 1;
        k = k + 1;
    }

    while (j < n2){
        vector[k] = r_[j];
        j = j + 1;
        k = k + 1;
    }
}

int[] merge_sort(int[] vector, int l, int r){
    if (l < r){
        int m;

        m = (l+r)/2;
        
        merge_sort(vector, l, m);
        merge_sort(vector , m+1, r);

        merge(vector, l, m, r);
    }
    
    return vector;
}