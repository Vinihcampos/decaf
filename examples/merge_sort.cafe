int[] merge(int [] arr, int l, int m, int r) { 
    int i;
    int j;
    int k; 
    int n1; 
    int n2;
    int [] lh;
    int [] rh;
    n1 = m - l + 1; 
    n2 =  r - m; 
  
    /* create temp arrays */
    lh = newArray(n1, int);
    rh = newArray(n2, int);
  
    /* Copy data to temp arrays lh[] and rh[] */
    for (i = 0; i < n1; i = i + 1) 
        lh[i] = arr[l + i]; 
    for (j = 0; j < n2; j = j + 1) 
        rh[j] = arr[m + 1+ j]; 
  
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) { 
        if (lh[i] <= rh[j]) 
        { 
            arr[k] = lh[i]; 
            i = i + 1; 
        } 
        else
        { 
            arr[k] = rh[j]; 
            j = j + 1; 
        } 
        k = k + 1; 
    } 
  
    /* Copy the remaining elements of lh[], if there 
       are any */
    while (i < n1) 
    { 
        arr[k] = lh[i]; 
        i = i + 1; 
        k = k + 1; 
    } 
  
    /* Copy the remaining elements of rh[], if there 
       are any */
    while (j < n2) 
    { 
        arr[k] = rh[j]; 
        j = j + 1; 
        k = k + 1; 
    }

    print(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);
    return arr;
} 
  
/* l is for left index and r is right index of the 
   sub-array of arr to be sorted */
int[] mergeSort(int []arr, int l, int r) 
{   

    if (l < r) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m; 
        m = l+(r-l)/2; 
  
        // Sort first and second halves 
        arr = mergeSort(arr, l, m);

        print(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);
        
        arr = mergeSort(arr, m+1, r);
        print(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);
  
        arr = merge(arr, l, m, r);
        print(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);
    }

    return arr;
} 
  
  
/* Driver program to test above functions */
void main() 
{ 
    int [] arr;
    int arr_size;
    int i;
    arr = newArray(6, int);
    arr[0] = 12; 
    arr[1] = 11;
    arr[2] = 13;
    arr[3] = 5;
    arr[4] = 6;
    arr[5] = 7;

    arr_size = 6;  

    arr = mergeSort(arr, 0, arr_size - 1); 
    
    print(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);
} 