class Pessoa{
	string nome;
	string cpf;

	void pessoa(string nome, string cpf){
		nome = nome;
		cpf = cpf;
	}
}

string deba;

class Professor extends Pessoa{
	double salario;
	string disciplina;

	void professor(string nome, string cpf){
		super(nome, cpf);
	}

}

interface CalculoA{
	double soma(int a, int b);
	double subtracao(int a, int b);
	void imprimir();
}

interface CalculoB{
	double multiplicacao(int a, int b);
	double divisao(int a, int b);
	bool calculavel();
}

class Calculadora implements CalculoA, CalculoB{
	double soma(int a, int b){
		return a + b;	
	}
	double subtracao(int a, int b){
		double resultado;
		resultado = a - b;
		return resultado;
	}
	double multiplicacao(int a, int b){
		return a*b;
	}
	double divisao(int a, int b){
		double resultado;
		resultado = a/b;
		return resultado;
	}
	bool calculavel(){
		bool identificador_bool_para_teste;
		identificador_bool_para_teste = false;
		return identificador_bool_para_teste;
	}		
}

class Teste extends Calculadora{
	void a(){
		int var;
		var = 0;
		for(;var<2;){
			print("a soma Ã© ", soma(5,2));
			var = var + 1;
		}

		for(var = 1;var<2;){
			print(soma(5,2));
			var = var + 1;
		}

		for(;var<2;var=var+1){
			print(soma(5,2));
		}

		for(;var<2;var=var+1)
			;

		while(var <2)
			var = 3;

		return;
	}

	bool candinho;

	Teste testezinho(){
		Teste test;
		test = new(Teste);
		2 - 0xfff.test;
		null.test;
		return test;
	}
}

void main(){
     	int[] vector;
	int i;

     	vector = newArray(5, int);
	
	for(i=0; i<n1; i=i+1)
        	vector[i+3] = readInteger();
	
	if(vetor[2] == 2){
		print(vetor[2]);
	}
	if (vetor[2] > 2){
           	print(vetor[0]);
        }
        else{
	        vector = newArray(5, int);
        }
}

void main(){
	string[] vector;
	vector = newArray(5, string);
	vector[0] = newArray(5, string);
}

int[] binary_search(int[] vector, int key, int length){
    int inf;     
    int sup; 
    int half;

    inf = 0;
    sup = length-1;
    
    while (inf <= sup){
        half = (inf + sup)/2;
	print(null);
        if (key == vector[half]){
           return half*500;
        }
        if (key < vector[half]){
           sup = half/1;
	   break;
        }
        else{
           inf = half%5;
        }
    }
    return -1;
}
